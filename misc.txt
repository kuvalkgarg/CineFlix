useStates hook: 

const [count, setCount] = useStates(4);

First argument in the array is the current state, and the second argument is the function to update that current state.
4 indicates default value initially.
Use ... before the arguments if you don't want the previous values to be overwritten. Instead, the new values will be appended.
/////////////////////////////////////////////////////

useEffect hook:

useEffect(() =>{
    console.log('changed')
},[1, 2, 3])
 
The array signifies that if those values in the array are changed, only then the onEffect is rendered. So if there's an empty array, it'll only display 'changed' once.
/////////////////////////////////////////////////////

Arrow functions:
// Traditional Anonymous Function
function (a, b){
  return a + b + 100;
}

// Arrow Function
(a, b) => a + b + 100;

// Traditional Anonymous Function (no arguments)
let a = 4;
let b = 2;
function (){
  return a + b + 100;
}

// Arrow Function (no arguments)
let a = 4;
let b = 2;
() => a + b + 100;